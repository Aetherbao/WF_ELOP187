<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\GEELY_APP.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\GEELY_APP.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Mon Apr  7 17:03:58 2025
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Task_TaskRun &rArr; Task_10msTask &rArr; Interface_10msTask &rArr; OBD_SlwTask &rArr; ASW_OBD_sss_FaltLvl2Conf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">SVC_Handler_main</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">SVC_Handler_main</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[91]">ComIf_ExecuteEcuReset</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[91]">ComIf_ExecuteEcuReset</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[d]">ADC1_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[c]">ADC2_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[18]">BDRV_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from isr.o(.text.BusFault_Handler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[e]">CCU6SR0_IRQHandler</a> from isr.o(.text.CCU6SR0_IRQHandler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[f]">CCU6SR1_IRQHandler</a> from isr.o(.text.CCU6SR1_IRQHandler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[10]">CCU6SR2_IRQHandler</a> from isr.o(.text.CCU6SR2_IRQHandler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[11]">CCU6SR3_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[19]">DMA_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[16]">EXINT0_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[17]">EXINT1_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[a]">GPT1_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[b]">GPT2_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from isr.o(.text.HardFault_Handler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from isr.o(.text.MemManage_Handler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from isr.o(.text.NMI_Handler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[12]">SSC1_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[13]">SSC2_IRQHandler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[1d]">SVC_Handler_main</a> from startup_tle987x.o(.text) referenced from startup_tle987x.o(.text)
 <LI><a href="#[9]">SysTick_Handler</a> from isr.o(.text.SysTick_Handler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[1b]">SystemInit</a> from system_tle987x.o(.text.SystemInit) referenced from startup_tle987x.o(.text)
 <LI><a href="#[14]">UART1_IRQHandler</a> from isr.o(.text.UART1_IRQHandler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from isr.o(.text.UART2_IRQHandler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from isr.o(.text.UsageFault_Handler) referenced from startup_tle987x.o(RESET)
 <LI><a href="#[1c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_tle987x.o(.text)
 <LI><a href="#[1e]">didrd_ActiveSessionState</a> from uds_user.o(.text.didrd_ActiveSessionState) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[52]">didrd_AppVersion</a> from uds_user.o(.text.didrd_AppVersion) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[50]">didrd_BootVersion</a> from uds_user.o(.text.didrd_BootVersion) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[51]">didrd_DataVersion</a> from uds_user.o(.text.didrd_DataVersion) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[4e]">didrd_ECUProductionTime</a> from uds_user.o(.text.didrd_ECUProductionTime) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[4c]">didrd_HardwareVersionNumber</a> from uds_user.o(.text.didrd_HardwareVersionNumber) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[49]">didrd_OrderNumber</a> from uds_user.o(.text.didrd_OrderNumber) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[4a]">didrd_SerialNumber</a> from uds_user.o(.text.didrd_SerialNumber) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[53]">didrd_SystemName</a> from uds_user.o(.text.didrd_SystemName) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[37]">didrd_parAngPosEvalMode</a> from uds_user.o(.text.didrd_parAngPosEvalMode) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[25]">didrd_parDirCurrCtrlIntgGain</a> from uds_user.o(.text.didrd_parDirCurrCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[23]">didrd_parDirCurrCtrlPropGain</a> from uds_user.o(.text.didrd_parDirCurrCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[2f]">didrd_parMinSnslRefElctSpd</a> from uds_user.o(.text.didrd_parMinSnslRefElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[31]">didrd_parMinStrtUpElctSpd</a> from uds_user.o(.text.didrd_parMinStrtUpElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[3b]">didrd_parOlClAngRiseRate</a> from uds_user.o(.text.didrd_parOlClAngRiseRate) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[47]">didrd_parPCBTempColdStart_C</a> from uds_user.o(.text.didrd_parPCBTempColdStart_C) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[2d]">didrd_parPLLCtrlIntgGain</a> from uds_user.o(.text.didrd_parPLLCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[45]">didrd_parPLLCtrlIntgGainColdStart</a> from uds_user.o(.text.didrd_parPLLCtrlIntgGainColdStart) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[2b]">didrd_parPLLCtrlPropGain</a> from uds_user.o(.text.didrd_parPLLCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[43]">didrd_parPLLCtrlPropGainColdStart</a> from uds_user.o(.text.didrd_parPLLCtrlPropGainColdStart) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[29]">didrd_parQdrtCurrCtrlIntgGain</a> from uds_user.o(.text.didrd_parQdrtCurrCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[27]">didrd_parQdrtCurrCtrlPropGain</a> from uds_user.o(.text.didrd_parQdrtCurrCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[3f]">didrd_parRefSpdRisOLSlewRate</a> from uds_user.o(.text.didrd_parRefSpdRisOLSlewRate) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[3d]">didrd_parRefSpdRisSlewRate</a> from uds_user.o(.text.didrd_parRefSpdRisSlewRate) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[35]">didrd_parSnslElctAngDely</a> from uds_user.o(.text.didrd_parSnslElctAngDely) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[21]">didrd_parSpdCtrlIntgGain</a> from uds_user.o(.text.didrd_parSpdCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[1f]">didrd_parSpdCtrlPropGain</a> from uds_user.o(.text.didrd_parSpdCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[33]">didrd_parStlgStrtUpElctSpd</a> from uds_user.o(.text.didrd_parStlgStrtUpElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[39]">didrd_parStrtUpProcTolElctSpd</a> from uds_user.o(.text.didrd_parStrtUpProcTolElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[41]">didrd_u16_cntOLWait</a> from uds_user.o(.text.didrd_u16_cntOLWait) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[4f]">didwt_ECUProductionTime</a> from uds_user.o(.text.didwt_ECUProductionTime) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[4d]">didwt_HardwareVersionNumber</a> from uds_user.o(.text.didwt_HardwareVersionNumber) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[4b]">didwt_SerialNumber</a> from uds_user.o(.text.didwt_SerialNumber) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[38]">didwt_parAngPosEvalMode</a> from uds_user.o(.text.didwt_parAngPosEvalMode) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[26]">didwt_parDirCurrCtrlIntgGain</a> from uds_user.o(.text.didwt_parDirCurrCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[24]">didwt_parDirCurrCtrlPropGain</a> from uds_user.o(.text.didwt_parDirCurrCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[30]">didwt_parMinSnslRefElctSpd</a> from uds_user.o(.text.didwt_parMinSnslRefElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[32]">didwt_parMinStrtUpElctSpd</a> from uds_user.o(.text.didwt_parMinStrtUpElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[3c]">didwt_parOlClAngRiseRate</a> from uds_user.o(.text.didwt_parOlClAngRiseRate) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[48]">didwt_parPCBTempColdStart_C</a> from uds_user.o(.text.didwt_parPCBTempColdStart_C) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[2e]">didwt_parPLLCtrlIntgGain</a> from uds_user.o(.text.didwt_parPLLCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[46]">didwt_parPLLCtrlIntgGainColdStart</a> from uds_user.o(.text.didwt_parPLLCtrlIntgGainColdStart) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[2c]">didwt_parPLLCtrlPropGain</a> from uds_user.o(.text.didwt_parPLLCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[44]">didwt_parPLLCtrlPropGainColdStart</a> from uds_user.o(.text.didwt_parPLLCtrlPropGainColdStart) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[2a]">didwt_parQdrtCurrCtrlIntgGain</a> from uds_user.o(.text.didwt_parQdrtCurrCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[28]">didwt_parQdrtCurrCtrlPropGain</a> from uds_user.o(.text.didwt_parQdrtCurrCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[40]">didwt_parRefSpdRisOLSlewRate</a> from uds_user.o(.text.didwt_parRefSpdRisOLSlewRate) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[3e]">didwt_parRefSpdRisSlewRate</a> from uds_user.o(.text.didwt_parRefSpdRisSlewRate) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[36]">didwt_parSnslElctAngDely</a> from uds_user.o(.text.didwt_parSnslElctAngDely) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[22]">didwt_parSpdCtrlIntgGain</a> from uds_user.o(.text.didwt_parSpdCtrlIntgGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[20]">didwt_parSpdCtrlPropGain</a> from uds_user.o(.text.didwt_parSpdCtrlPropGain) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[34]">didwt_parStlgStrtUpElctSpd</a> from uds_user.o(.text.didwt_parStlgStrtUpElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[3a]">didwt_parStrtUpProcTolElctSpd</a> from uds_user.o(.text.didwt_parStrtUpProcTolElctSpd) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[42]">didwt_u16_cntOLWait</a> from uds_user.o(.text.didwt_u16_cntOLWait) referenced from uds_cfg.o(.rodata.udsDIDcfg)
 <LI><a href="#[1a]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[54]">rtStart_checkAppDataIntegrity</a> from uds_user.o(.text.rtStart_checkAppDataIntegrity) referenced from uds_cfg.o(.rodata.udsRtIDcfg)
 <LI><a href="#[55]">rtStart_stayInBoot</a> from uds_user.o(.text.rtStart_stayInBoot) referenced from uds_cfg.o(.rodata.udsRtIDcfg)
 <LI><a href="#[59]">serv_didRead</a> from uds.o(.text.serv_didRead) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[5a]">serv_didWrite</a> from uds.o(.text.serv_didWrite) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[5c]">serv_ecuReset</a> from uds_user.o(.text.serv_ecuReset) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[5d]">serv_requestDownload</a> from uds_user.o(.text.serv_requestDownload) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[5e]">serv_requestTransferExit</a> from uds_user.o(.text.serv_requestTransferExit) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[5b]">serv_routineControl</a> from uds.o(.text.serv_routineControl) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[57]">serv_securityAccess</a> from uds.o(.text.serv_securityAccess) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[56]">serv_sessionControl</a> from uds.o(.text.serv_sessionControl) referenced from uds_cfg.o(.rodata.udsServCfg)
 <LI><a href="#[58]">serv_testPresent</a> from uds.o(.text.serv_testPresent) referenced from uds_cfg.o(.rodata.udsServCfg)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(.text)
</UL>
<P><STRONG><a name="[164]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[5f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[165]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[166]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[167]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[168]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[169]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SVC_Handler_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_main
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(.text)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>BDRV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CCU6SR3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SSC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SSC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_AST_Init
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_Init
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhCurrGen_SlwTask
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigIn_MedTask
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_sss_FaltLvl2Conf
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_SigIn_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_AST_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_PhCurrGen_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_PhVltgGen_Init
</UL>

<P><STRONG><a name="[16f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[60]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>ADC1_GetChResult</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, adc1.o(.text.ADC1_GetChResult))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_PeriodMatch
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempOil_Routine
</UL>

<P><STRONG><a name="[a9]"></a>ADC1_Init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, adc1.o(.text.ADC1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[aa]"></a>ADC2_Init</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, adc2.o(.text.ADC2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[65]"></a>ADC_BattStable_Protection</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, adc_meas.o(.text.ADC_BattStable_Protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_BattStable_Protection
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[119]"></a>ADC_MCUTemp_Routine</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, adc_meas.o(.text.ADC_MCUTemp_Routine))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100msTask
</UL>

<P><STRONG><a name="[67]"></a>ADC_TempOil_Routine</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, adc_meas.o(.text.ADC_TempOil_Routine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_TempOil_Routine
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100msTask
</UL>

<P><STRONG><a name="[11c]"></a>ADC_VCP_Routine</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, adc_meas.o(.text.ADC_VCP_Routine))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
</UL>

<P><STRONG><a name="[cd]"></a>ADC_VSD_VDH_Routine</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, adc_meas.o(.text.ADC_VSD_VDH_Routine))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_500usTask
</UL>

<P><STRONG><a name="[69]"></a>AST_SlwTask</STRONG> (Thumb, 4186 bytes, Stack size 104 bytes, asw_ast.o(.text.AST_SlwTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = AST_SlwTask &rArr; mul_ssu32_hiSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_iu16lu32n16ts16D_2s4GBl96
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_iu8lu32n16ts16Ds32_binlcs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_nde_s32_floor
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look2_is16lu32n16tu16_binlcse
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_hiSR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_loSR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[71]"></a>ASW_AST_Init</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, asw_ast.o(.text.ASW_AST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ASW_AST_Init &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_StartupTask
</UL>

<P><STRONG><a name="[d2]"></a>ASW_DcycGen_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, asw_dcycgen.o(.text.ASW_DcycGen_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_StartupTask
</UL>

<P><STRONG><a name="[74]"></a>ASW_OBD_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, asw_obd.o(.text.ASW_OBD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASW_OBD_Init &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_StartupTask
</UL>

<P><STRONG><a name="[f2]"></a>ASW_OBD_lib_HysDeb_1</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, asw_obd.o(.text.ASW_OBD_lib_HysDeb_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASW_OBD_lib_HysDeb_1
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[f3]"></a>ASW_OBD_lib_HysDeb_12</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, asw_obd.o(.text.ASW_OBD_lib_HysDeb_12))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASW_OBD_lib_HysDeb_12
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[f4]"></a>ASW_OBD_lib_HysDeb_14</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, asw_obd.o(.text.ASW_OBD_lib_HysDeb_14))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASW_OBD_lib_HysDeb_14
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[f0]"></a>ASW_OBD_sfc_FaultDebounce</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, asw_obd.o(.text.ASW_OBD_sfc_FaultDebounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASW_OBD_sfc_FaultDebounce
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[f1]"></a>ASW_OBD_sfc_FaultDefiniteness</STRONG> (Thumb, 288 bytes, Stack size 16 bytes, asw_obd.o(.text.ASW_OBD_sfc_FaultDefiniteness))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ASW_OBD_sfc_FaultDefiniteness
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[ef]"></a>ASW_OBD_sss_FaltEnFlgConf</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, asw_obd.o(.text.ASW_OBD_sss_FaltEnFlgConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ASW_OBD_sss_FaltEnFlgConf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[77]"></a>ASW_OBD_sss_FaltLvl2Conf</STRONG> (Thumb, 518 bytes, Stack size 88 bytes, asw_obd.o(.text.ASW_OBD_sss_FaltLvl2Conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ASW_OBD_sss_FaltLvl2Conf
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[f6]"></a>ASW_OBD_sss_FaltLvlConf</STRONG> (Thumb, 660 bytes, Stack size 48 bytes, asw_obd.o(.text.ASW_OBD_sss_FaltLvlConf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ASW_OBD_sss_FaltLvlConf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[78]"></a>ASW_PhCurrGen_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, asw_phcurrgen.o(.text.ASW_PhCurrGen_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ASW_PhCurrGen_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_StartupTask
</UL>

<P><STRONG><a name="[79]"></a>ASW_PhVltgGen_Init</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, asw_phvltggen.o(.text.ASW_PhVltgGen_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ASW_PhVltgGen_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_StartupTask
</UL>

<P><STRONG><a name="[7a]"></a>ASW_SigIn_Init</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, asw_sigin.o(.text.ASW_SigIn_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ASW_SigIn_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_StartupTask
</UL>

<P><STRONG><a name="[f9]"></a>BDRV_Clr_OC_STS</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bdrv_bdrv.o(.text.BDRV_Clr_OC_STS))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CalcStart
</UL>

<P><STRONG><a name="[81]"></a>BDRV_Clr_Sts</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bdrv.o(.text.BDRV_Clr_Sts))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_VCPFault_Handle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_StateSwitch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Init_Check
</UL>

<P><STRONG><a name="[7b]"></a>BDRV_ConfigBridgePWM</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bdrv_bdrv.o(.text.BDRV_ConfigBridgePWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BDRV_ConfigBridgePWM &rArr; BDRV_Set_Bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Set_Bridge
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LaunchPWM
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_VCPFault_Handle
</UL>

<P><STRONG><a name="[7d]"></a>BDRV_Diag_OpenLoad</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, bdrv.o(.text.BDRV_Diag_OpenLoad))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BDRV_Diag_OpenLoad &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_3PhaseOpenLoad_Check
</UL>

<P><STRONG><a name="[80]"></a>BDRV_Init</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, bdrv.o(.text.BDRV_Init))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Init_Check
</UL>

<P><STRONG><a name="[7f]"></a>BDRV_Init_Check</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, bdrv_bdrv.o(.text.BDRV_Init_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BDRV_Init_Check &rArr; DIAG_3PhaseOpenLoadFault_Handle &rArr; DIAG_3PhaseOpenLoad_Check &rArr; BDRV_Diag_OpenLoad &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_StartupTask
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_3PhaseOpenLoadFault_Handle
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Clr_Sts
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
</UL>

<P><STRONG><a name="[7c]"></a>BDRV_Set_Bridge</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bdrv.o(.text.BDRV_Set_Bridge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BDRV_Set_Bridge
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_StateSwitch
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_ConfigBridgePWM
</UL>

<P><STRONG><a name="[84]"></a>BDRV_StateSwitch</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bdrv_bdrv.o(.text.BDRV_StateSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BDRV_StateSwitch &rArr; BDRV_Set_Bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Clr_Sts
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Set_Bridge
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_ISR
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CCU6SR0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.CCU6SR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>CCU6SR1_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, isr.o(.text.CCU6SR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CCU6SR1_IRQHandler &rArr; ISR_T12_PeriodMatch &rArr; PWM_Set_ClacPwmVals
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_PeriodMatch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_OneMatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>CCU6SR2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, isr.o(.text.CCU6SR2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>CCU6_Init</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, ccu6.o(.text.CCU6_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[ac]"></a>CSA_Init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, csa.o(.text.CSA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[fb]"></a>CSA_Offset_Get</STRONG> (Thumb, 234 bytes, Stack size 20 bytes, csa.o(.text.CSA_Offset_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CSA_Offset_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SSM_Init
</UL>

<P><STRONG><a name="[87]"></a>ComDrv_1msTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lintask.o(.text.ComDrv_1msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ComDrv_1msTask &rArr; LIN_LLD_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_LLD_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_1msTask
</UL>

<P><STRONG><a name="[89]"></a>ComDrv_500usTask</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lintask.o(.text.ComDrv_500usTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ComDrv_500usTask &rArr; l_hal_rx_state_machine &rArr; lin_slave_task_rx_data &rArr; LinIf_RxIndication &rArr; LinTp_LinIfRxIndication &rArr; LinTp_PduFifoInc &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hal_rx_state_machine
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hal_txchecksum_calculation
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_500usTask
</UL>

<P><STRONG><a name="[8c]"></a>ComDrv_LLD_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linmain.o(.text.ComDrv_LLD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ComDrv_LLD_Init &rArr; l_sys_init &rArr; lin_main_init &rArr; lin_hal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Init
</UL>

<P><STRONG><a name="[96]"></a>ComDrv_Set_APPTxMsgData</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, genlinconfig.o(.text.ComDrv_Set_APPTxMsgData))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_APPTxMsgData
</UL>

<P><STRONG><a name="[8e]"></a>ComIf_1msTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, comif_task.o(.text.ComIf_1msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ComIf_1msTask &rArr; ProtStk_UDS_1msTask &rArr; uds_task &rArr; serv_didRead &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_1msTask
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtStk_UDS_1msTask
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1msTask
</UL>

<P><STRONG><a name="[90]"></a>ComIf_500usTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, comif_task.o(.text.ComIf_500usTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ComIf_500usTask &rArr; ComDrv_500usTask &rArr; l_hal_rx_state_machine &rArr; lin_slave_task_rx_data &rArr; LinIf_RxIndication &rArr; LinTp_LinIfRxIndication &rArr; LinTp_PduFifoInc &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_500usTask
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_ISR
</UL>

<P><STRONG><a name="[91]"></a>ComIf_ExecuteEcuReset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, comif_ecureset_hal.o(.text.ComIf_ExecuteEcuReset))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ExecuteEcuReset
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ExecuteEcuReset
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_ecuReset
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecuResetTrig
</UL>

<P><STRONG><a name="[13d]"></a>ComIf_Get_APPRxMesCnt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comif_application_message.o(.text.ComIf_Get_APPRxMesCnt))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
</UL>

<P><STRONG><a name="[13e]"></a>ComIf_Get_APPRxMsgData</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, comif_application_message.o(.text.ComIf_Get_APPRxMsgData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_Get_APPRxMsgData
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
</UL>

<P><STRONG><a name="[142]"></a>ComIf_Get_APPTxMesFlagFirst</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comif_application_message.o(.text.ComIf_Get_APPTxMesFlagFirst))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_pid
</UL>

<P><STRONG><a name="[143]"></a>ComIf_Get_APPTxMesFlagSecond</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comif_application_message.o(.text.ComIf_Get_APPTxMesFlagSecond))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_pid
</UL>

<P><STRONG><a name="[13f]"></a>ComIf_Get_SleepReqFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comif_application_message.o(.text.ComIf_Get_SleepReqFlag))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
</UL>

<P><STRONG><a name="[131]"></a>ComIf_Get_WriteFunc_02</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, comif_wrdabyid_hal.o(.text.ComIf_Get_WriteFunc_02))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_Get_WriteFunc_02
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didwt_SerialNumber
</UL>

<P><STRONG><a name="[130]"></a>ComIf_Get_WriteFunc_03</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, comif_wrdabyid_hal.o(.text.ComIf_Get_WriteFunc_03))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_Get_WriteFunc_03
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didwt_HardwareVersionNumber
</UL>

<P><STRONG><a name="[12f]"></a>ComIf_Get_WriteFunc_04</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, comif_wrdabyid_hal.o(.text.ComIf_Get_WriteFunc_04))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_Get_WriteFunc_04
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didwt_ECUProductionTime
</UL>

<P><STRONG><a name="[92]"></a>ComIf_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, comif_init.o(.text.ComIf_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ComIf_Init &rArr; ComDrv_LLD_Init &rArr; l_sys_init &rArr; lin_main_init &rArr; lin_hal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtStk_LINTp_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtStk_UDS_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_LLD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_McuInit
</UL>

<P><STRONG><a name="[95]"></a>ComIf_Set_APPTxMsgData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, comif_application_message.o(.text.ComIf_Set_APPTxMsgData))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_Set_APPTxMsgData
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_ApplCom_ASW_Trans
</UL>

<P><STRONG><a name="[12c]"></a>ComIf_Set_ReadFunc_01</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_01))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_OrderNumber
</UL>

<P><STRONG><a name="[12d]"></a>ComIf_Set_ReadFunc_02</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_02))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_SerialNumber
</UL>

<P><STRONG><a name="[12b]"></a>ComIf_Set_ReadFunc_03</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_03))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_HardwareVersionNumber
</UL>

<P><STRONG><a name="[12a]"></a>ComIf_Set_ReadFunc_04</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_04))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_ECUProductionTime
</UL>

<P><STRONG><a name="[128]"></a>ComIf_Set_ReadFunc_05</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_05))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_BootVersion
</UL>

<P><STRONG><a name="[129]"></a>ComIf_Set_ReadFunc_06</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_06))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_DataVersion
</UL>

<P><STRONG><a name="[127]"></a>ComIf_Set_ReadFunc_07</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_07))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_AppVersion
</UL>

<P><STRONG><a name="[12e]"></a>ComIf_Set_ReadFunc_08</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, comif_rddabyid_hal.o(.text.ComIf_Set_ReadFunc_08))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_SystemName
</UL>

<P><STRONG><a name="[97]"></a>ComIf_UnlockedL1_CompareKey</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, comif_sa_hal.o(.text.ComIf_UnlockedL1_CompareKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ComIf_UnlockedL1_CompareKey &rArr; ComIf_canculate_security_access_jili
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_canculate_security_access_jili
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_saCheckKey
</UL>

<P><STRONG><a name="[161]"></a>ComIf_UnlockedL1_GetSeed</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, comif_sa_hal.o(.text.ComIf_UnlockedL1_GetSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ComIf_UnlockedL1_GetSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_saUpdateSeed
</UL>

<P><STRONG><a name="[98]"></a>ComIf_canculate_security_access_jili</STRONG> (Thumb, 540 bytes, Stack size 36 bytes, comif_sa_hal.o(.text.ComIf_canculate_security_access_jili))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ComIf_canculate_security_access_jili
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_UnlockedL1_CompareKey
</UL>

<P><STRONG><a name="[82]"></a>DIAG_3PhaseOpenLoadFault_Handle</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, diag_handle.o(.text.DIAG_3PhaseOpenLoadFault_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = DIAG_3PhaseOpenLoadFault_Handle &rArr; DIAG_3PhaseOpenLoad_Check &rArr; BDRV_Diag_OpenLoad &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_3PhaseOpenLoad_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Init_Check
</UL>

<P><STRONG><a name="[11e]"></a>DIAG_BasicToAPPfault_Monitor</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, diag_handle.o(.text.DIAG_BasicToAPPfault_Monitor))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
</UL>

<P><STRONG><a name="[9a]"></a>DIAG_HSLSFault_Handle</STRONG> (Thumb, 536 bytes, Stack size 24 bytes, diag_handle.o(.text.DIAG_HSLSFault_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DIAG_HSLSFault_Handle
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_VREF_Fault_Check
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DIAG_Get_VSDUP_State
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DIAG_Get_VSDLO_State
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DIAG_Get_VCPLO1_State
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100msTask
</UL>

<P><STRONG><a name="[123]"></a>DIAG_PosSCD_Com</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, diag_handle.o(.text.DIAG_PosSCD_Com))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_ISR
</UL>

<P><STRONG><a name="[9f]"></a>DIAG_SysSupply_Err</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, diag_handle.o(.text.DIAG_SysSupply_Err))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DIAG_SysSupply_Err
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DIAG_Get_VSOV_State
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DIAG_Get_VSUV_State
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1000msTask
</UL>

<P><STRONG><a name="[11b]"></a>DIAG_VCPAndVDHDiff_Handle</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, diag_handle.o(.text.DIAG_VCPAndVDHDiff_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
</UL>

<P><STRONG><a name="[a2]"></a>DIAG_VCPFault_Handle</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, diag_handle.o(.text.DIAG_VCPFault_Handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DIAG_VCPFault_Handle &rArr; BDRV_ConfigBridgePWM &rArr; BDRV_Set_Bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DIAG_Get_VCPLO1_State
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Clr_Sts
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_ConfigBridgePWM
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100msTask
</UL>

<P><STRONG><a name="[11d]"></a>DIAG_VDDFault_Handle</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, diag_handle.o(.text.DIAG_VDDFault_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
</UL>

<P><STRONG><a name="[124]"></a>DIAG_VSDFault_Handle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, diag_handle.o(.text.DIAG_VSDFault_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_ISR
</UL>

<P><STRONG><a name="[a3]"></a>DIO_Set_PinDir</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dio_dio.o(.text.DIO_Set_PinDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DIO_Set_PinDir &rArr; PORT_ChangePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ChangePin
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferDMA
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferStart
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SyncTransmit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Init
</UL>

<P><STRONG><a name="[a5]"></a>DIO_Set_PinState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dio_dio.o(.text.DIO_Set_PinState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DIO_Set_PinState &rArr; PORT_ChangePin
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_ChangePin
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferStart
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Data_Read
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Init
</UL>

<P><STRONG><a name="[b5]"></a>DMA_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dma.o(.text.DMA_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[d0]"></a>DcycGen_FstTask</STRONG> (Thumb, 978 bytes, Stack size 24 bytes, asw_dcycgen.o(.text.DcycGen_FstTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DcycGen_FstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_FR_Task
</UL>

<P><STRONG><a name="[7e]"></a>Delay_us</STRONG> (Thumb, 632 bytes, Stack size 16 bytes, wdt1.o(.text.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_EnterSleepMode
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Data_Read
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Diag_OpenLoad
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
</UL>

<P><STRONG><a name="[ad]"></a>GPT12E_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gpt12e.o(.text.GPT12E_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[9b]"></a>HSI_DIAG_Get_VCPLO1_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DIAG_Get_VCPLO1_State))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_HSLSFault_Handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_VCPFault_Handle
</UL>

<P><STRONG><a name="[9c]"></a>HSI_DIAG_Get_VSDLO_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DIAG_Get_VSDLO_State))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_HSLSFault_Handle
</UL>

<P><STRONG><a name="[9d]"></a>HSI_DIAG_Get_VSDUP_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DIAG_Get_VSDUP_State))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_HSLSFault_Handle
</UL>

<P><STRONG><a name="[a1]"></a>HSI_DIAG_Get_VSOV_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DIAG_Get_VSOV_State))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_SysSupply_Err
</UL>

<P><STRONG><a name="[a0]"></a>HSI_DIAG_Get_VSUV_State</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DIAG_Get_VSUV_State))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_SysSupply_Err
</UL>

<P><STRONG><a name="[110]"></a>HSI_DMA_TxRxChannelEnable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DMA_TxRxChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DMAResetChannel
</UL>

<P><STRONG><a name="[10e]"></a>HSI_DMA_TxRxSrcSelect_SSC1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DMA_TxRxSrcSelect_SSC1))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DMAInit
</UL>

<P><STRONG><a name="[10f]"></a>HSI_DmaBasePtrConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_DmaBasePtrConfig))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DMAInit
</UL>

<P><STRONG><a name="[a6]"></a>HSI_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hsi_sw.o(.text.HSI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HSI_Init &rArr; PMU_Init &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INT_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER21_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSC1_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MON_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPT12E_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSA_Init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU6_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC2_Init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_Init
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PMU_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BattStable_Protection
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_McuInit
</UL>

<P><STRONG><a name="[b8]"></a>HSI_NVMPage_Write</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hsi_sw.o(.text.HSI_NVMPage_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HSI_NVMPage_Write &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DataRAM2NVM
</UL>

<P><STRONG><a name="[109]"></a>HSI_SPI_RxIntCheck</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_SPI_RxIntCheck))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferDMA
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SyncTransmit
</UL>

<P><STRONG><a name="[10c]"></a>HSI_SPI_SendWord</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_SPI_SendWord))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferStart
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SyncTransmit
</UL>

<P><STRONG><a name="[9e]"></a>HSI_VREF_Fault_Check</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, hsi_sw.o(.text.HSI_VREF_Fault_Check))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_HSLSFault_Handle
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>INT_Init</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, int.o(.text.INT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[85]"></a>ISR_T12_OneMatch</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, pwm_pwm.o(.text.ISR_T12_OneMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ISR_T12_OneMatch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_CompareFallValues
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU6SR1_IRQHandler
</UL>

<P><STRONG><a name="[86]"></a>ISR_T12_PeriodMatch</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, pwm_pwm.o(.text.ISR_T12_PeriodMatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ISR_T12_PeriodMatch &rArr; PWM_Set_ClacPwmVals
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_Set_DutyCycle
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_FR_Task
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_SampleTimer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_CompareRiseValues
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_ClacPwmVals
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_GetChResult
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCU6SR1_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>IntMon_PllLossOfLock_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sys_int.o(.text.IntMon_PllLossOfLock_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[ed]"></a>IntMon_SupplyPrewarning_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, hsi_sw.o(.text.IntMon_SupplyPrewarning_IRQHandler))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[c0]"></a>Interface_10msTask</STRONG> (Thumb, 658 bytes, Stack size 24 bytes, mid_interface.o(.text.Interface_10msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Interface_10msTask &rArr; OBD_SlwTask &rArr; ASW_OBD_sss_FaltLvl2Conf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SCU_SleepMode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_IntEnIrq
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_IntDisIrq
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DataRAM2NVM
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_ApplCom_ASW_Trans
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigIn_SlwTask
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_OBD_SlwTask_Trans
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhCurrGen_SlwTask
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
</UL>

<P><STRONG><a name="[120]"></a>Interface_1msTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, mid_interface.o(.text.Interface_1msTask))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1msTask
</UL>

<P><STRONG><a name="[ca]"></a>Interface_500usTask</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, mid_interface.o(.text.Interface_500usTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = Interface_500usTask &rArr; PhVltgGen_MedTask &rArr; mul_ssu32_loSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SSM_ReconstructCurr
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Data_Read
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VSD_VDH_Routine
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhVltgGen_MedTask
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigIn_MedTask
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_ISR
</UL>

<P><STRONG><a name="[c5]"></a>Interface_ApplCom_ASW_Trans</STRONG> (Thumb, 856 bytes, Stack size 40 bytes, mid_interface.o(.text.Interface_ApplCom_ASW_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Interface_ApplCom_ASW_Trans
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_APPTxMsgData
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[bb]"></a>Interface_FR_Task</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, mid_interface.o(.text.Interface_FR_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Interface_FR_Task &rArr; DcycGen_FstTask
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DcycGen_FstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_PeriodMatch
</UL>

<P><STRONG><a name="[c2]"></a>Interface_OBD_SlwTask_Trans</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, mid_interface.o(.text.Interface_OBD_SlwTask_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Interface_OBD_SlwTask_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[bc]"></a>Interface_Set_DutyCycle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mid_interface.o(.text.Interface_Set_DutyCycle))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_PeriodMatch
</UL>

<P><STRONG><a name="[d1]"></a>Interface_StartupTask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mid_interface.o(.text.Interface_StartupTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Interface_StartupTask &rArr; ASW_SigIn_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_SigIn_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_AST_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_PhCurrGen_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_PhVltgGen_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_DcycGen_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_StartupTask
</UL>

<P><STRONG><a name="[d3]"></a>LINTP_ENTER_CRITICAL</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lintp_schm.o(.text.LINTP_ENTER_CRITICAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_is_RequestCompleted
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoInc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoGetOne
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoInit
</UL>

<P><STRONG><a name="[d5]"></a>LINTP_EXIT_CRITICAL</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lintp_schm.o(.text.LINTP_EXIT_CRITICAL))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_irq_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_reset
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_is_RequestCompleted
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoInc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoGetOne
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoInit
</UL>

<P><STRONG><a name="[d7]"></a>LIN_COM_Handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, linmain.o(.text.LIN_COM_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LIN_COM_Handler &rArr; lin_hal_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>LIN_Enable_Transceiver</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, linmain.o(.text.LIN_Enable_Transceiver))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_init
</UL>

<P><STRONG><a name="[ae]"></a>LIN_Init</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, lin.o(.text.LIN_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[88]"></a>LIN_LLD_Service</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, linmain.o(.text.LIN_LLD_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LIN_LLD_Service
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_init_uart
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_ifc_read_status
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_1msTask
</UL>

<P><STRONG><a name="[db]"></a>LinIf_HeaderIndication</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, linif_headerindication.o(.text.LinIf_HeaderIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LinIf_HeaderIndication &rArr; LinTp_LinIfTriggerTransmit &rArr; LinTp_TxMsgProc &rArr; uds_rspPending &rArr; uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_LinIfTriggerTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_pid
</UL>

<P><STRONG><a name="[dd]"></a>LinIf_RxIndication</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, linif_rxindication.o(.text.LinIf_RxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = LinIf_RxIndication &rArr; LinTp_LinIfRxIndication &rArr; LinTp_PduFifoInc &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_LinIfRxIndication
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
</UL>

<P><STRONG><a name="[df]"></a>LinIf_TxConfirmation</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, linif_txconfirmation.o(.text.LinIf_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinIf_TxConfirmation &rArr; LinTp_LinIfTxConfirmation &rArr; LinTp_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_LinIfTxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_tx_data
</UL>

<P><STRONG><a name="[e8]"></a>LinTp_CancelTimer</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lintp_timer.o(.text.LinTp_CancelTimer))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_task_1ms
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_TxConfirmation
</UL>

<P><STRONG><a name="[de]"></a>LinTp_LinIfRxIndication</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lintp_cbk.o(.text.LinTp_LinIfRxIndication))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LinTp_LinIfRxIndication &rArr; LinTp_PduFifoInc &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoInc
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinIf_RxIndication
</UL>

<P><STRONG><a name="[dc]"></a>LinTp_LinIfTriggerTransmit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lintp_cbk.o(.text.LinTp_LinIfTriggerTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LinTp_LinIfTriggerTransmit &rArr; LinTp_TxMsgProc &rArr; uds_rspPending &rArr; uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_TxMsgProc
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinIf_HeaderIndication
</UL>

<P><STRONG><a name="[e0]"></a>LinTp_LinIfTxConfirmation</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lintp_cbk.o(.text.LinTp_LinIfTxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinTp_LinIfTxConfirmation &rArr; LinTp_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinIf_TxConfirmation
</UL>

<P><STRONG><a name="[e4]"></a>LinTp_PduFifoGetOne</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lintp_queue.o(.text.LinTp_PduFifoGetOne))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinTp_PduFifoGetOne &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_task_1ms
</UL>

<P><STRONG><a name="[e1]"></a>LinTp_PduFifoInc</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, lintp_queue.o(.text.LinTp_PduFifoInc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LinTp_PduFifoInc &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_LinIfRxIndication
</UL>

<P><STRONG><a name="[e5]"></a>LinTp_PduFifoInit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lintp_queue.o(.text.LinTp_PduFifoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LinTp_PduFifoInit &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtStk_LINTp_Init
</UL>

<P><STRONG><a name="[e6]"></a>LinTp_ProcessTimers</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lintp_timer.o(.text.LinTp_ProcessTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinTp_ProcessTimers
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_timeout_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_task_1ms
</UL>

<P><STRONG><a name="[e9]"></a>LinTp_ResetTimer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lintp_timer.o(.text.LinTp_ResetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtStk_LINTp_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_task_1ms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_timeout_cb
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_TxConfirmation
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linTp_Reset
</UL>

<P><STRONG><a name="[ea]"></a>LinTp_SetTimer</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lintp_timer.o(.text.LinTp_SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_task_1ms
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_TxConfirmation
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_TxMsgProc
</UL>

<P><STRONG><a name="[e3]"></a>LinTp_TxConfirmation</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, lintp.o(.text.LinTp_TxConfirmation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LinTp_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_CancelTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_SetTimer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_LinIfTxConfirmation
</UL>

<P><STRONG><a name="[e2]"></a>LinTp_TxMsgProc</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, lintp.o(.text.LinTp_TxMsgProc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LinTp_TxMsgProc &rArr; uds_rspPending &rArr; uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_SetTimer
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rspPending
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_LinIfTriggerTransmit
</UL>

<P><STRONG><a name="[ec]"></a>LinTp_task_1ms</STRONG> (Thumb, 1380 bytes, Stack size 32 bytes, lintp.o(.text.LinTp_task_1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LinTp_task_1ms &rArr; LinTp_PduFifoGetOne &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_ProcessTimers
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoGetOne
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_CancelTimer
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_SetTimer
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtStk_UDS_1msTask
</UL>

<P><STRONG><a name="[e7]"></a>LinTp_timeout_cb</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lintp.o(.text.LinTp_timeout_cb))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_ProcessTimers
</UL>

<P><STRONG><a name="[af]"></a>MON_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mon.o(.text.MON_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>Mem_DataRAM2NVM</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, mem_mem.o(.text.Mem_DataRAM2NVM))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Mem_DataRAM2NVM &rArr; HSI_NVMPage_Write &rArr; ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_IntEnIrq
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_NVMPage_Write
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_IntDisIrq
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[145]"></a>Mem_EreaseEeprom</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mem_mem.o(.text.Mem_EreaseEeprom))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[113]"></a>Mem_RAMInit</STRONG> (Thumb, 950 bytes, Stack size 0 bytes, mem_mem.o(.text.Mem_RAMInit))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_McuInit
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, isr.o(.text.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMon_SupplyPrewarning_IRQHandler
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntMon_PllLossOfLock_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>OBD_SlwTask</STRONG> (Thumb, 10656 bytes, Stack size 232 bytes, asw_obd.o(.text.OBD_SlwTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = OBD_SlwTask &rArr; ASW_OBD_sss_FaltLvl2Conf
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_sss_FaltEnFlgConf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_lib_HysDeb_12
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_lib_HysDeb_14
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_sss_FaltLvl2Conf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_sss_FaltLvlConf
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_lib_HysDeb_1
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_sfc_FaultDefiniteness
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_sfc_FaultDebounce
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_is16lu32n32ys16n_eAC3J1UD
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[76]"></a>OBD_SlwTask_Init</STRONG> (Thumb, 816 bytes, Stack size 0 bytes, asw_obd.o(.text.OBD_SlwTask_Init))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ASW_OBD_Init
</UL>

<P><STRONG><a name="[a8]"></a>PMU_Init</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, pmu.o(.text.PMU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PMU_Init &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[a4]"></a>PORT_ChangePin</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, port.o(.text.PORT_ChangePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_ChangePin
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinDir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinState
</UL>

<P><STRONG><a name="[b6]"></a>PORT_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, port.o(.text.PORT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[f7]"></a>PWM_CalcStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pwm_clac.o(.text.PWM_CalcStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PWM_CalcStart &rArr; PWM_LaunchPWM &rArr; BDRV_ConfigBridgePWM &rArr; BDRV_Set_Bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_LaunchPWM
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Clr_OC_STS
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_StartupTask
</UL>

<P><STRONG><a name="[f8]"></a>PWM_LaunchPWM</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pwm_pwm.o(.text.PWM_LaunchPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PWM_LaunchPWM &rArr; BDRV_ConfigBridgePWM &rArr; BDRV_Set_Bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_ConfigBridgePWM
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CalcStart
</UL>

<P><STRONG><a name="[fa]"></a>PWM_SSM_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, pwm_clac.o(.text.PWM_SSM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PWM_SSM_Init &rArr; CSA_Offset_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSA_Offset_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_McuInit
</UL>

<P><STRONG><a name="[cc]"></a>PWM_SSM_ReconstructCurr</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, pwm_clac.o(.text.PWM_SSM_ReconstructCurr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PWM_SSM_ReconstructCurr
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_500usTask
</UL>

<P><STRONG><a name="[bd]"></a>PWM_Set_ClacPwmVals</STRONG> (Thumb, 360 bytes, Stack size 44 bytes, pwm_clac.o(.text.PWM_Set_ClacPwmVals))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWM_Set_ClacPwmVals
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_PeriodMatch
</UL>

<P><STRONG><a name="[ba]"></a>PWM_Set_CompareFallValues</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm_clac.o(.text.PWM_Set_CompareFallValues))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_T12ChannelVal
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_OneMatch
</UL>

<P><STRONG><a name="[be]"></a>PWM_Set_CompareRiseValues</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm_clac.o(.text.PWM_Set_CompareRiseValues))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_T12ChannelVal
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_PeriodMatch
</UL>

<P><STRONG><a name="[bf]"></a>PWM_Set_SampleTimer</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, pwm_clac.o(.text.PWM_Set_SampleTimer))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_T13PeriodVal
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ISR_T12_PeriodMatch
</UL>

<P><STRONG><a name="[fc]"></a>PWM_Set_T12ChannelVal</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pwm_pwm.o(.text.PWM_Set_T12ChannelVal))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_CompareFallValues
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_CompareRiseValues
</UL>

<P><STRONG><a name="[112]"></a>PWM_Set_T13CompareVal</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pwm_pwm.o(.text.PWM_Set_T13CompareVal))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_McuInit
</UL>

<P><STRONG><a name="[fd]"></a>PWM_Set_T13PeriodVal</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwm_pwm.o(.text.PWM_Set_T13PeriodVal))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_SampleTimer
</UL>

<P><STRONG><a name="[c1]"></a>PhCurrGen_SlwTask</STRONG> (Thumb, 2314 bytes, Stack size 144 bytes, asw_phcurrgen.o(.text.PhCurrGen_SlwTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = PhCurrGen_SlwTask &rArr; mul_ssu32_hiSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_hiSR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_loSR
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[cf]"></a>PhVltgGen_MedTask</STRONG> (Thumb, 4726 bytes, Stack size 192 bytes, asw_phvltggen.o(.text.PhVltgGen_MedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = PhVltgGen_MedTask &rArr; mul_ssu32_loSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_loSR
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look2_iu8s16lu32n16tu16_binlcse
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_500usTask
</UL>

<P><STRONG><a name="[cb]"></a>PosSCD_Data_Read</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, posscd_possensor.o(.text.PosSCD_Data_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PosSCD_Data_Read &rArr; SPI_DataTransferDMA &rArr; Sys_DMAResetChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferDMA
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferStart
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinState
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_500usTask
</UL>

<P><STRONG><a name="[101]"></a>PosSCD_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, posscd_possensor.o(.text.PosSCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PosSCD_Init &rArr; SPI_SyncTransmit &rArr; DIO_Set_PinDir &rArr; PORT_ChangePin
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DMAInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SyncTransmit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Update_TxBuffer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinDir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinState
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_McuInit
</UL>

<P><STRONG><a name="[b9]"></a>ProgramPage</STRONG> (Thumb, 256 bytes, Stack size 40 bytes, bootrom.o(.text.ProgramPage))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ProgramPage
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_SOW_Service
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Service
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_NVMPage_Write
</UL>

<P><STRONG><a name="[94]"></a>ProtStk_LINTp_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lintp.o(.text.ProtStk_LINTp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ProtStk_LINTp_Init &rArr; LinTp_PduFifoInit &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_PduFifoInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Init
</UL>

<P><STRONG><a name="[8f]"></a>ProtStk_UDS_1msTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lintask.o(.text.ProtStk_UDS_1msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProtStk_UDS_1msTask &rArr; uds_task &rArr; serv_didRead &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_task_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_1msTask
</UL>

<P><STRONG><a name="[93]"></a>ProtStk_UDS_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uds.o(.text.ProtStk_UDS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Init
</UL>

<P><STRONG><a name="[114]"></a>SCU_ClkInit</STRONG> (Thumb, 494 bytes, Stack size 8 bytes, scu.o(.text.SCU_ClkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCU_ClkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[107]"></a>SCU_EnterSleepMode</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, scu.o(.text.SCU_EnterSleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SCU_EnterSleepMode &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_SOW_Service
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SCU_SleepMode
</UL>

<P><STRONG><a name="[a7]"></a>SCU_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, scu.o(.text.SCU_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[100]"></a>SPI_DataTransferDMA</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_ssc.o(.text.SPI_DataTransferDMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DataTransferDMA &rArr; Sys_DMAResetChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_DMAResetChannel
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SCU_ClrRxInt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_SPI_RxIntCheck
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinDir
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Data_Read
</UL>

<P><STRONG><a name="[ff]"></a>SPI_DataTransferStart</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi_ssc.o(.text.SPI_DataTransferStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_DataTransferStart &rArr; DIO_Set_PinDir &rArr; PORT_ChangePin
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SCU_ClrRxInt
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_SPI_SendWord
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinDir
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinState
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Data_Read
</UL>

<P><STRONG><a name="[103]"></a>SPI_SyncTransmit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, spi_ssc.o(.text.SPI_SyncTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_SyncTransmit &rArr; DIO_Set_PinDir &rArr; PORT_ChangePin
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_SCU_ClrRxInt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_SPI_RxIntCheck
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_SPI_SendWord
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIO_Set_PinDir
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Init
</UL>

<P><STRONG><a name="[102]"></a>SPI_Update_TxBuffer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi_ssc.o(.text.SPI_Update_TxBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Init
</UL>

<P><STRONG><a name="[b0]"></a>SSC1_Init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ssc.o(.text.SSC1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[ce]"></a>SigIn_MedTask</STRONG> (Thumb, 576 bytes, Stack size 16 bytes, asw_sigin.o(.text.SigIn_MedTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SigIn_MedTask &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_500usTask
</UL>

<P><STRONG><a name="[c4]"></a>SigIn_SlwTask</STRONG> (Thumb, 648 bytes, Stack size 16 bytes, asw_sigin.o(.text.SigIn_SlwTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SigIn_SlwTask &rArr; look1_iu16lu32n16tu8_binlcse
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_iu16lu32n16tu8_binlcse
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, isr.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>SysTick_Init</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, wdt1.o(.text.SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[104]"></a>Sys_DMAInit</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, sys_dma.o(.text.Sys_DMAInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_DMAInit
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DmaBasePtrConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DMA_TxRxSrcSelect_SSC1
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Init
</UL>

<P><STRONG><a name="[10b]"></a>Sys_DMAResetChannel</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, sys_dma.o(.text.Sys_DMAResetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Sys_DMAResetChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_DMA_TxRxChannelEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferDMA
</UL>

<P><STRONG><a name="[c8]"></a>Sys_IntDisIrq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_int.o(.text.Sys_IntDisIrq))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DataRAM2NVM
</UL>

<P><STRONG><a name="[c9]"></a>Sys_IntEnIrq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_int.o(.text.Sys_IntEnIrq))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_DataRAM2NVM
</UL>

<P><STRONG><a name="[111]"></a>Sys_McuInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_mcuinit.o(.text.Sys_McuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Sys_McuInit &rArr; ComIf_Init &rArr; ComDrv_LLD_Init &rArr; l_sys_init &rArr; lin_main_init &rArr; lin_hal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Set_T13CompareVal
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_SSM_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PosSCD_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_RAMInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>Sys_SCU_ClrRxInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_scu.o(.text.Sys_SCU_ClrRxInt))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferDMA
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataTransferStart
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SyncTransmit
</UL>

<P><STRONG><a name="[c7]"></a>Sys_SCU_SleepMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sys_scu.o(.text.Sys_SCU_SleepMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Sys_SCU_SleepMode &rArr; SCU_EnterSleepMode &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_EnterSleepMode
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
</UL>

<P><STRONG><a name="[1b]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system_tle987x.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; SCU_ClkInit
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_ClkInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(.text)
</UL>
<P><STRONG><a name="[b2]"></a>TIMER21_Init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timer2x.o(.text.TIMER21_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[b1]"></a>TIMER2_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer2x.o(.text.TIMER2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[83]"></a>Task_StartupTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_task.o(.text.Task_StartupTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Task_StartupTask &rArr; Interface_StartupTask &rArr; ASW_SigIn_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_StartupTask
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_CalcStart
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Init_Check
</UL>

<P><STRONG><a name="[121]"></a>Task_TaskRun</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, task_task.o(.text.Task_TaskRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = Task_TaskRun &rArr; Task_10msTask &rArr; Interface_10msTask &rArr; OBD_SlwTask &rArr; ASW_OBD_sss_FaltLvl2Conf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1000msTask
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_100msTask
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_1msTask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>Task_Timer_ISR</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, task_task.o(.text.Task_Timer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = Task_Timer_ISR &rArr; Interface_500usTask &rArr; PhVltgGen_MedTask &rArr; mul_ssu32_loSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_500usTask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_500usTask
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_VSDFault_Handle
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_PosSCD_Com
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_StateSwitch
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer21_interrupt
</UL>

<P><STRONG><a name="[125]"></a>Timer21_interrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sys_timer2x.o(.text.Timer21_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = Timer21_interrupt &rArr; Task_Timer_ISR &rArr; Interface_500usTask &rArr; PhVltgGen_MedTask &rArr; mul_ssu32_loSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Timer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, isr.o(.text.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART1_IRQHandler &rArr; LIN_COM_Handler &rArr; lin_hal_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_COM_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>UART1_Init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, uart.o(.text.UART1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, isr.o(.text.UART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = UART2_IRQHandler &rArr; Timer21_interrupt &rArr; Task_Timer_ISR &rArr; Interface_500usTask &rArr; PhVltgGen_MedTask &rArr; mul_ssu32_loSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer21_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>UART2_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text.UART2_Init))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HSI_Init
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, isr.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>WDT1_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdt1.o(.text.WDT1_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[105]"></a>WDT1_SOW_Service</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, wdt1.o(.text.WDT1_SOW_Service))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_EnterSleepMode
</UL>

<P><STRONG><a name="[66]"></a>WDT1_Service</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, wdt1.o(.text.WDT1_Service))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProgramPage
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_10msTask
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_BattStable_Protection
</UL>

<P><STRONG><a name="[108]"></a>WDT1_Stop</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wdt1.o(.text.WDT1_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCU_EnterSleepMode
</UL>

<P><STRONG><a name="[1e]"></a>didrd_ActiveSessionState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_ActiveSessionState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_ActiveSessionState
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_getActiveSession
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[52]"></a>didrd_AppVersion</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_AppVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_AppVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_07
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[50]"></a>didrd_BootVersion</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_BootVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_BootVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_05
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[51]"></a>didrd_DataVersion</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_DataVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_DataVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_06
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[4e]"></a>didrd_ECUProductionTime</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_ECUProductionTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_ECUProductionTime
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_04
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[4c]"></a>didrd_HardwareVersionNumber</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_HardwareVersionNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_HardwareVersionNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_03
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[49]"></a>didrd_OrderNumber</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_OrderNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_OrderNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_01
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[4a]"></a>didrd_SerialNumber</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_SerialNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_SerialNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_02
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[53]"></a>didrd_SystemName</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds_user.o(.text.didrd_SystemName))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = didrd_SystemName
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Set_ReadFunc_08
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[37]"></a>didrd_parAngPosEvalMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parAngPosEvalMode))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[25]"></a>didrd_parDirCurrCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parDirCurrCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[23]"></a>didrd_parDirCurrCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parDirCurrCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[2f]"></a>didrd_parMinSnslRefElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parMinSnslRefElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[31]"></a>didrd_parMinStrtUpElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parMinStrtUpElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[3b]"></a>didrd_parOlClAngRiseRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parOlClAngRiseRate))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[47]"></a>didrd_parPCBTempColdStart_C</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parPCBTempColdStart_C))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[2d]"></a>didrd_parPLLCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parPLLCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[45]"></a>didrd_parPLLCtrlIntgGainColdStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parPLLCtrlIntgGainColdStart))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[2b]"></a>didrd_parPLLCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parPLLCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[43]"></a>didrd_parPLLCtrlPropGainColdStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parPLLCtrlPropGainColdStart))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[29]"></a>didrd_parQdrtCurrCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parQdrtCurrCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[27]"></a>didrd_parQdrtCurrCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parQdrtCurrCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[3f]"></a>didrd_parRefSpdRisOLSlewRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parRefSpdRisOLSlewRate))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[3d]"></a>didrd_parRefSpdRisSlewRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parRefSpdRisSlewRate))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[35]"></a>didrd_parSnslElctAngDely</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parSnslElctAngDely))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[21]"></a>didrd_parSpdCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parSpdCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[1f]"></a>didrd_parSpdCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parSpdCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[33]"></a>didrd_parStlgStrtUpElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parStlgStrtUpElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[39]"></a>didrd_parStrtUpProcTolElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_parStrtUpProcTolElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[41]"></a>didrd_u16_cntOLWait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didrd_u16_cntOLWait))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[4f]"></a>didwt_ECUProductionTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uds_user.o(.text.didwt_ECUProductionTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = didwt_ECUProductionTime &rArr; ComIf_Get_WriteFunc_04
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_WriteFunc_04
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[4d]"></a>didwt_HardwareVersionNumber</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uds_user.o(.text.didwt_HardwareVersionNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = didwt_HardwareVersionNumber &rArr; ComIf_Get_WriteFunc_03
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_WriteFunc_03
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[4b]"></a>didwt_SerialNumber</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uds_user.o(.text.didwt_SerialNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = didwt_SerialNumber &rArr; ComIf_Get_WriteFunc_02
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_WriteFunc_02
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[38]"></a>didwt_parAngPosEvalMode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parAngPosEvalMode))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[26]"></a>didwt_parDirCurrCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parDirCurrCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[24]"></a>didwt_parDirCurrCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parDirCurrCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[30]"></a>didwt_parMinSnslRefElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parMinSnslRefElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[32]"></a>didwt_parMinStrtUpElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parMinStrtUpElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[3c]"></a>didwt_parOlClAngRiseRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parOlClAngRiseRate))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[48]"></a>didwt_parPCBTempColdStart_C</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parPCBTempColdStart_C))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[2e]"></a>didwt_parPLLCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parPLLCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[46]"></a>didwt_parPLLCtrlIntgGainColdStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parPLLCtrlIntgGainColdStart))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[2c]"></a>didwt_parPLLCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parPLLCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[44]"></a>didwt_parPLLCtrlPropGainColdStart</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parPLLCtrlPropGainColdStart))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[2a]"></a>didwt_parQdrtCurrCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parQdrtCurrCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[28]"></a>didwt_parQdrtCurrCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parQdrtCurrCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[40]"></a>didwt_parRefSpdRisOLSlewRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parRefSpdRisOLSlewRate))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[3e]"></a>didwt_parRefSpdRisSlewRate</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parRefSpdRisSlewRate))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[36]"></a>didwt_parSnslElctAngDely</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parSnslElctAngDely))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[22]"></a>didwt_parSpdCtrlIntgGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parSpdCtrlIntgGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[20]"></a>didwt_parSpdCtrlPropGain</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parSpdCtrlPropGain))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[34]"></a>didwt_parStlgStrtUpElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parStlgStrtUpElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[3a]"></a>didwt_parStrtUpProcTolElctSpd</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_parStrtUpProcTolElctSpd))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[42]"></a>didwt_u16_cntOLWait</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds_user.o(.text.didwt_u16_cntOLWait))
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsDIDcfg)
</UL>
<P><STRONG><a name="[6c]"></a>div_nde_s32_floor</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, div_nde_s32_floor.o(.text.div_nde_s32_floor))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
</UL>

<P><STRONG><a name="[144]"></a>div_nzp_repeat_u32</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, div_nzp_repeat_u32.o(.text.div_nzp_repeat_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = div_nzp_repeat_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_is16lu32n32ys16n_eAC3J1UD
</UL>

<P><STRONG><a name="[132]"></a>ecuResetTrig</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uds_user.o(.text.ecuResetTrig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ecuResetTrig
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ExecuteEcuReset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
</UL>

<P><STRONG><a name="[14c]"></a>fblNvm_save1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fbl_infor.o(.text.fblNvm_save1))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtStart_checkAppDataIntegrity
</UL>

<P><STRONG><a name="[140]"></a>l_Update_Frame_Flags</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, genlinconfig.o(.text.l_Update_Frame_Flags))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
</UL>

<P><STRONG><a name="[8a]"></a>l_hal_rx_state_machine</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, lin_hal.o(.text.l_hal_rx_state_machine))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = l_hal_rx_state_machine &rArr; lin_slave_task_rx_data &rArr; LinIf_RxIndication &rArr; LinTp_LinIfRxIndication &rArr; LinTp_PduFifoInc &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_tx_data
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_pid
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_500usTask
</UL>

<P><STRONG><a name="[139]"></a>l_hal_tx_state_machine</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, lin_hal.o(.text.l_hal_tx_state_machine))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_ISR
</UL>

<P><STRONG><a name="[8b]"></a>l_hal_txchecksum_calculation</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lin_hal.o(.text.l_hal_txchecksum_calculation))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_500usTask
</UL>

<P><STRONG><a name="[d9]"></a>l_ifc_read_status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lin_driver_api.o(.text.l_ifc_read_status))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_LLD_Service
</UL>

<P><STRONG><a name="[8d]"></a>l_sys_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lin_driver_api.o(.text.l_sys_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = l_sys_init &rArr; lin_main_init &rArr; lin_hal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_main_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComDrv_LLD_Init
</UL>

<P><STRONG><a name="[d4]"></a>l_sys_irq_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, linmain.o(.text.l_sys_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_tx_response
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>

<P><STRONG><a name="[d6]"></a>l_sys_irq_restore</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, linmain.o(.text.l_sys_irq_restore))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_data
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_tx_response
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
</UL>

<P><STRONG><a name="[138]"></a>linTp_Reset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lintp.o(.text.linTp_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_ResetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
</UL>

<P><STRONG><a name="[d8]"></a>lin_hal_ISR</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, lin_hal.o(.text.lin_hal_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lin_hal_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hal_tx_state_machine
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_COM_Handler
</UL>

<P><STRONG><a name="[13a]"></a>lin_hal_init</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lin_hal.o(.text.lin_hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lin_hal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_Enable_Transceiver
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_main_init
</UL>

<P><STRONG><a name="[da]"></a>lin_hal_init_uart</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, lin_hal.o(.text.lin_hal_init_uart))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIN_LLD_Service
</UL>

<P><STRONG><a name="[141]"></a>lin_hal_rx_response</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lin_hal.o(.text.lin_hal_rx_response))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_pid
</UL>

<P><STRONG><a name="[13c]"></a>lin_hal_tx_response</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, lin_hal.o(.text.lin_hal_tx_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lin_hal_tx_response
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_irq_restore
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_slave_task_rx_pid
</UL>

<P><STRONG><a name="[137]"></a>lin_main_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lin_main.o(.text.lin_main_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lin_main_init &rArr; lin_hal_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_init
</UL>

<P><STRONG><a name="[136]"></a>lin_slave_task_rx_data</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, lin_slave_task.o(.text.lin_slave_task_rx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lin_slave_task_rx_data &rArr; LinIf_RxIndication &rArr; LinTp_LinIfRxIndication &rArr; LinTp_PduFifoInc &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinIf_RxIndication
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_SleepReqFlag
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_APPRxMsgData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_APPRxMesCnt
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_irq_restore
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_sys_irq_disable
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_Update_Frame_Flags
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hal_rx_state_machine
</UL>

<P><STRONG><a name="[134]"></a>lin_slave_task_rx_pid</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, lin_slave_task.o(.text.lin_slave_task_rx_pid))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lin_slave_task_rx_pid &rArr; LinIf_HeaderIndication &rArr; LinTp_LinIfTriggerTransmit &rArr; LinTp_TxMsgProc &rArr; uds_rspPending &rArr; uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_APPTxMesFlagSecond
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_Get_APPTxMesFlagFirst
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinIf_HeaderIndication
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_rx_response
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lin_hal_tx_response
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hal_rx_state_machine
</UL>

<P><STRONG><a name="[135]"></a>lin_slave_task_tx_data</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, lin_slave_task.o(.text.lin_slave_task_tx_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lin_slave_task_tx_data &rArr; LinIf_TxConfirmation &rArr; LinTp_LinIfTxConfirmation &rArr; LinTp_TxConfirmation
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinIf_TxConfirmation
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;l_hal_rx_state_machine
</UL>

<P><STRONG><a name="[f5]"></a>look1_is16lu32n32ys16n_eAC3J1UD</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, look1_is16lu32n32ys16n_eac3j1ud.o(.text.look1_is16lu32n32ys16n_eAC3J1UD))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = look1_is16lu32n32ys16n_eAC3J1UD &rArr; mul_ssu32_loSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_loSR
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;div_nzp_repeat_u32
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OBD_SlwTask
</UL>

<P><STRONG><a name="[6f]"></a>look1_iu16lu32n16ts16D_2s4GBl96</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, look1_iu16lu32n16ts16d_2s4gbl96.o(.text.look1_iu16lu32n16ts16D_2s4GBl96))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = look1_iu16lu32n16ts16D_2s4GBl96
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
</UL>

<P><STRONG><a name="[10d]"></a>look1_iu16lu32n16tu8_binlcse</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, look1_iu16lu32n16tu8_binlcse.o(.text.look1_iu16lu32n16tu8_binlcse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = look1_iu16lu32n16tu8_binlcse
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SigIn_SlwTask
</UL>

<P><STRONG><a name="[6e]"></a>look1_iu8lu32n16ts16Ds32_binlcs</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, look1_iu8lu32n16ts16ds32_binlcs.o(.text.look1_iu8lu32n16ts16Ds32_binlcs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = look1_iu8lu32n16ts16Ds32_binlcs
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
</UL>

<P><STRONG><a name="[6b]"></a>look2_is16lu32n16tu16_binlcse</STRONG> (Thumb, 468 bytes, Stack size 20 bytes, look2_is16lu32n16tu16_binlcse.o(.text.look2_is16lu32n16tu16_binlcse))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = look2_is16lu32n16tu16_binlcse
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
</UL>

<P><STRONG><a name="[fe]"></a>look2_iu8s16lu32n16tu16_binlcse</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, look2_iu8s16lu32n16tu16_binlcse.o(.text.look2_iu8s16lu32n16tu16_binlcse))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = look2_iu8s16lu32n16tu16_binlcse
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhVltgGen_MedTask
</UL>

<P><STRONG><a name="[1a]"></a>main</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; Task_TaskRun &rArr; Task_10msTask &rArr; Interface_10msTask &rArr; OBD_SlwTask &rArr; ASW_OBD_sss_FaltLvl2Conf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TaskRun
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sys_McuInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_EreaseEeprom
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[6a]"></a>mul_ssu32_hiSR</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mul_ssu32_hisr.o(.text.mul_ssu32_hiSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mul_ssu32_hiSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_wide_su32
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhCurrGen_SlwTask
</UL>

<P><STRONG><a name="[6d]"></a>mul_ssu32_loSR</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, mul_ssu32_losr.o(.text.mul_ssu32_loSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = mul_ssu32_loSR &rArr; mul_wide_su32
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_wide_su32
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AST_SlwTask
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhCurrGen_SlwTask
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PhVltgGen_MedTask
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;look1_is16lu32n32ys16n_eAC3J1UD
</UL>

<P><STRONG><a name="[146]"></a>mul_wide_su32</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, mul_wide_su32.o(.text.mul_wide_su32))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mul_wide_su32
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_hiSR
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mul_ssu32_loSR
</UL>

<P><STRONG><a name="[147]"></a>nt_is_RequestCompleted</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lintp_export.o(.text.nt_is_RequestCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nt_is_RequestCompleted &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[15f]"></a>nt_is_locked</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_is_locked))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[152]"></a>nt_req_is_functional_check</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_req_is_functional_check))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[151]"></a>nt_req_pop_dt</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_req_pop_dt))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_popRequestData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[15e]"></a>nt_req_pos_set</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_req_pos_set))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[150]"></a>nt_req_remain_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_req_remain_len))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_remainRequestDLC
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[162]"></a>nt_rsp_get_data</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_rsp_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
</UL>

<P><STRONG><a name="[155]"></a>nt_rsp_push_buf</STRONG> (Thumb, 210 bytes, Stack size 20 bytes, lintp_export.o(.text.nt_rsp_push_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nt_rsp_push_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
</UL>

<P><STRONG><a name="[154]"></a>nt_rsp_push_dt</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_rsp_push_dt))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_pushRspData
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[148]"></a>nt_rsp_reset</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lintp_export.o(.text.nt_rsp_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nt_rsp_reset &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[153]"></a>nt_rsp_set</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, lintp_export.o(.text.nt_rsp_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nt_rsp_set
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[149]"></a>nt_rsp_start</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lintp_export.o(.text.nt_rsp_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[14a]"></a>nt_unlock</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lintp_export.o(.text.nt_unlock))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;linTp_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[54]"></a>rtStart_checkAppDataIntegrity</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, uds_user.o(.text.rtStart_checkAppDataIntegrity))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtStart_checkAppDataIntegrity &rArr; uds_rspPending &rArr; uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fblNvm_save1
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_getActiveSession
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_pushRspData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_popRequestData
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rspPending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsRtIDcfg)
</UL>
<P><STRONG><a name="[55]"></a>rtStart_stayInBoot</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, uds_user.o(.text.rtStart_stayInBoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtStart_stayInBoot
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_remainRequestDLC
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_popRequestData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsRtIDcfg)
</UL>
<P><STRONG><a name="[59]"></a>serv_didRead</STRONG> (Thumb, 458 bytes, Stack size 40 bytes, uds.o(.text.serv_didRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serv_didRead &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_didRwReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_buf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_remain_len
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[5a]"></a>serv_didWrite</STRONG> (Thumb, 550 bytes, Stack size 48 bytes, uds.o(.text.serv_didWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = serv_didWrite &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_didRwReady
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_remain_len
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[5c]"></a>serv_ecuReset</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uds_user.o(.text.serv_ecuReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = serv_ecuReset &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_ExecuteEcuReset
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_pushRspData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_popRequestData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[5d]"></a>serv_requestDownload</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, uds_user.o(.text.serv_requestDownload))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serv_requestDownload &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_remainRequestDLC
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_pushRspData
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_popRequestData
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[5e]"></a>serv_requestTransferExit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, uds_user.o(.text.serv_requestTransferExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = serv_requestTransferExit &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[5b]"></a>serv_routineControl</STRONG> (Thumb, 512 bytes, Stack size 40 bytes, uds.o(.text.serv_routineControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serv_routineControl &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[57]"></a>serv_securityAccess</STRONG> (Thumb, 642 bytes, Stack size 32 bytes, uds.o(.text.serv_securityAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = serv_securityAccess &rArr; uds_saCheckKey &rArr; ComIf_UnlockedL1_CompareKey &rArr; ComIf_canculate_security_access_jili
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_saCheckKey
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_saUpdateSeed
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_buf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_remain_len
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[56]"></a>serv_sessionControl</STRONG> (Thumb, 450 bytes, Stack size 40 bytes, uds.o(.text.serv_sessionControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = serv_sessionControl &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sessionSwitch
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecuResetTrig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_remain_len
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[58]"></a>serv_testPresent</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uds.o(.text.serv_testPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = serv_testPresent &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uds_cfg.o(.rodata.udsServCfg)
</UL>
<P><STRONG><a name="[14f]"></a>uds_didRwReady</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uds_cfg.o(.text.uds_didRwReady))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
</UL>

<P><STRONG><a name="[126]"></a>uds_getActiveSession</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uds.o(.text.uds_getActiveSession))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtStart_checkAppDataIntegrity
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;didrd_ActiveSessionState
</UL>

<P><STRONG><a name="[158]"></a>uds_negativeRsp</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, uds.o(.text.uds_negativeRsp))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uds_negativeRsp &rArr; uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_requestTransferExit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_requestDownload
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_ecuReset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
</UL>

<P><STRONG><a name="[14b]"></a>uds_popRequestData</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds.o(.text.uds_popRequestData))
<BR><BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtStart_stayInBoot
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtStart_checkAppDataIntegrity
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_requestDownload
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_ecuReset
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_saCheckKey
</UL>

<P><STRONG><a name="[14d]"></a>uds_pushRspData</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uds.o(.text.uds_pushRspData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uds_pushRspData
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtStart_checkAppDataIntegrity
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_requestDownload
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_ecuReset
</UL>

<P><STRONG><a name="[14e]"></a>uds_remainRequestDLC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uds.o(.text.uds_remainRequestDLC))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_remain_len
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtStart_stayInBoot
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_requestDownload
</UL>

<P><STRONG><a name="[15d]"></a>uds_requestProcess</STRONG> (Thumb, 438 bytes, Stack size 40 bytes, uds.o(.text.uds_requestProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = uds_requestProcess &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_push_dt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_is_locked
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_remain_len
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pos_set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_pop_dt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[eb]"></a>uds_rspPending</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uds.o(.text.uds_rspPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uds_rspPending &rArr; uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtStart_checkAppDataIntegrity
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LinTp_TxMsgProc
</UL>

<P><STRONG><a name="[133]"></a>uds_rsp_is_pending</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lintp_export.o(.text.uds_rsp_is_pending))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_ecuReset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecuResetTrig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
</UL>

<P><STRONG><a name="[157]"></a>uds_rsp_pending</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lintp_export.o(.text.uds_rsp_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uds_rsp_pending &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_EXIT_CRITICAL
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LINTP_ENTER_CRITICAL
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rspPending
</UL>

<P><STRONG><a name="[15a]"></a>uds_saCheckKey</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uds_cfg.o(.text.uds_saCheckKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = uds_saCheckKey &rArr; ComIf_UnlockedL1_CompareKey &rArr; ComIf_canculate_security_access_jili
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_popRequestData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_UnlockedL1_CompareKey
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
</UL>

<P><STRONG><a name="[160]"></a>uds_saLevelUnlockCheckByIndex</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, uds.o(.text.uds_saLevelUnlockCheckByIndex))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_saUpdateSeed
</UL>

<P><STRONG><a name="[159]"></a>uds_saUpdateSeed</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uds_cfg.o(.text.uds_saUpdateSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uds_saUpdateSeed &rArr; ComIf_UnlockedL1_GetSeed
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_saLevelUnlockCheckByIndex
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_UnlockedL1_GetSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
</UL>

<P><STRONG><a name="[156]"></a>uds_sendResponse</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, uds.o(.text.uds_sendResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_start
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_set
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_rsp_get_data
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_unlock
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_req_is_functional_check
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_requestTransferExit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_requestDownload
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_ecuReset
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_routineControl
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didWrite
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_testPresent
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_securityAccess
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
</UL>

<P><STRONG><a name="[15b]"></a>uds_sessionSwitch</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, uds_cfg.o(.text.uds_sessionSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
</UL>

<P><STRONG><a name="[163]"></a>uds_sessionTimeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uds_cfg.o(.text.uds_sessionTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_task
</UL>

<P><STRONG><a name="[106]"></a>uds_task</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, uds.o(.text.uds_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = uds_task &rArr; serv_didRead &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sendResponse
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_didRead
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_sessionTimeout
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ecuResetTrig
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_negativeRsp
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_requestProcess
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uds_rsp_is_pending
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nt_is_RequestCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProtStk_UDS_1msTask
</UL>

<P><STRONG><a name="[173]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[174]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[175]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[99]"></a>DIAG_3PhaseOpenLoad_Check</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, diag_handle.o(.text.DIAG_3PhaseOpenLoad_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = DIAG_3PhaseOpenLoad_Check &rArr; BDRV_Diag_OpenLoad &rArr; Delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Diag_OpenLoad
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_3PhaseOpenLoadFault_Handle
</UL>

<P><STRONG><a name="[11f]"></a>Task_1msTask</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, task_task.o(.text.Task_1msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Task_1msTask &rArr; ComIf_1msTask &rArr; ProtStk_UDS_1msTask &rArr; uds_task &rArr; serv_didRead &rArr; uds_sendResponse &rArr; nt_rsp_start &rArr; LINTP_ENTER_CRITICAL
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_1msTask
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComIf_1msTask
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TaskRun
</UL>

<P><STRONG><a name="[11a]"></a>Task_10msTask</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, task_task.o(.text.Task_10msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Task_10msTask &rArr; Interface_10msTask &rArr; OBD_SlwTask &rArr; ASW_OBD_sss_FaltLvl2Conf
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interface_10msTask
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_VDDFault_Handle
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_BasicToAPPfault_Monitor
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_VCPAndVDHDiff_Handle
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BDRV_Init_Check
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT1_Service
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_VCP_Routine
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TaskRun
</UL>

<P><STRONG><a name="[118]"></a>Task_100msTask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, task_task.o(.text.Task_100msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Task_100msTask &rArr; DIAG_VCPFault_Handle &rArr; BDRV_ConfigBridgePWM &rArr; BDRV_Set_Bridge
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_HSLSFault_Handle
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_VCPFault_Handle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_MCUTemp_Routine
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TempOil_Routine
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TaskRun
</UL>

<P><STRONG><a name="[117]"></a>Task_1000msTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, task_task.o(.text.Task_1000msTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Task_1000msTask &rArr; DIAG_SysSupply_Err
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DIAG_SysSupply_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_TaskRun
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, startup_tle987x.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_tle987x.o(RESET)
</UL>
<P><STRONG><a name="[15c]"></a>__NVIC_SystemReset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, uds.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serv_sessionControl
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
